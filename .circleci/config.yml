version: 2.1

install_hex_rebar: &install_hex_rebar
  run:
    name: Install hex and rebar
    command: |
      mix local.hex --force
      mix local.rebar --force

jobs:
  build:
    docker:
      - image: circleci/elixir:1.10.4-node-browsers
        environment:
          MIX_ENV: test

    steps:
      - checkout
      - <<: *install_hex_rebar

      - run:
          name: "ELIXIR_VERSION.lock"
          command: echo "${ELIXIR_VERSION}" > ELIXIR_VERSION.lock
      - run:
          name: "OTP_VERSION.lock"
          command: echo "${OTP_VERSION}" > OTP_VERSION.lock

      # demo
      - restore_cache:
          keys:
            - v2-mix-compile-{{ checksum "OTP_VERSION.lock" }}-{{ checksum "ELIXIR_VERSION.lock" }}-{{ checksum "mix.lock" }}
            - v2-mix-compile-{{ checksum "OTP_VERSION.lock" }}-{{ checksum "ELIXIR_VERSION.lock" }}
      - run:
          name: compile demo
          command: mix do deps.get, compile
      - save_cache:
          key: v2-mix-compile-{{ checksum "OTP_VERSION.lock" }}-{{ checksum "ELIXIR_VERSION.lock" }}-{{ checksum "mix.lock" }}
          paths:
            - deps
            - _build
      - save_cache:
          key: v2-mix-compile-{{ checksum "OTP_VERSION.lock" }}-{{ checksum "ELIXIR_VERSION.lock" }}
          paths:
            - deps
            - _build

      - persist_to_workspace:
          root: ~/
          paths:
            - project

  test:
    docker:
      - image: circleci/elixir:1.10.4-node-browsers
        environment:
          MIX_ENV: test

    steps:
      - attach_workspace:
          at: ~/
      - <<: *install_hex_rebar

      - run:
          name: mix test
          command: mix coveralls.html

      - store_artifacts:
          path: cover/excoveralls.html
      - store_test_results:
          path: _build/test/junit

  dialyzer:
    docker:
      - image: circleci/elixir:1.10.4-node-browsers
        environment:
          MIX_ENV: test
    steps:
      - attach_workspace:
          at: ~/
      - <<: *install_hex_rebar

      - restore_cache:
          keys:
            - v2-mix-dialyzer-{{ checksum "OTP_VERSION.lock" }}-{{ checksum "ELIXIR_VERSION.lock" }}-{{ checksum "mix.lock" }}
            - v2-mix-dialyzer-{{ checksum "OTP_VERSION.lock" }}-{{ checksum "ELIXIR_VERSION.lock" }}

      - run:
          command: mix dialyzer --plt
          no_output_timeout: 20m

      - save_cache:
          key: v2-mix-dialyzer-{{ checksum "OTP_VERSION.lock" }}-{{ checksum "ELIXIR_VERSION.lock" }}-{{ checksum "mix.lock" }}
          paths:
            - priv/plts
      - save_cache:
          key: v2-mix-dialyzer-{{ checksum "OTP_VERSION.lock" }}-{{ checksum "ELIXIR_VERSION.lock" }}
          paths:
            - priv/plts

      - run:
          command: mix dialyzer --halt-exit-status
          no_output_timeout: 20m

  credo:
    docker:
      - image: circleci/elixir:1.10.4-node-browsers
        environment:
          MIX_ENV: test
    steps:
      - attach_workspace:
          at: ~/
      - <<: *install_hex_rebar
      - run:
          command: mix credo --strict

  check-formatted:
    docker:
      - image: circleci/elixir:1.10.4-node-browsers
        environment:
          MIX_ENV: test
    steps:
      - attach_workspace:
          at: ~/
      - <<: *install_hex_rebar
      - run:
          command: mix format --check-formatted

  deploy-site:
    docker:
      - image: circleci/elixir:1.10.4-node-browsers

    steps:
      - checkout

      - run:
          name: Install heroku-cli
          command: |
            curl https://cli-assets.heroku.com/install.sh | sh
      - run:
          name: Deploy Release to Production
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_PRODUCTION_APP_NAME.git master
      - run:
          name: Execute post install scripts
          command: |
            /usr/local/bin/heroku run --app $HEROKU_PRODUCTION_APP_NAME "POOL_SIZE=2 mix ecto.migrate"

workflows:
  version: 2
  primary:
    jobs:
      - build:
         filters:
            tags:
              only: /v.*/

      - check-formatted:
          requires:
            - build
          filters:
            tags:
              only: /v.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /v.*/
      - credo:
          requires:
            - build
          filters:
            tags:
              only: /v.*/
      # - dialyzer:
      #     requires:
      #       - credo
      #       - test
      #       - check-formatted

      - deploy-site:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
          requires:
            - check-formatted
            - test
            - credo
